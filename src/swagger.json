{
    "openapi": "3.0.1",
    "info": {
        "title": "Fast track first project",
        "description": "This is the first project that i'm doing for Compasso UOL fast track program",
        "contact": {
            "email": "andre.teixeira@compasso.uol.com.br"
        },
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "http://localhost:3000",
            "description": "Base URL to use the first version of this project"
        }
    ],

    "components": {
        "schemas": {
            "Person": {
                "type": "object",
                "properties": {
                    "nome": {
                        "type": "string"
                    },
                    "sex": {
                        "type": "string"
                    },
                    "data_nascimento": {
                        "type": "string"
                    },
                    "age": {
                        "type": "number"
                    },
                    "city_id": {
                        "type": "string"
                    }
                }
            },
            "People": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Person"
                }
            },
            "City": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "state": {
                        "type": "string"
                    }
                }
            },
            "Cities": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/City"
                }
            }    
        }        
    },

    "paths": {
        "/pessoa": {
            "post": {
                "summary": "Insert a person into the database",
                "description": "This route uses req.body to get information about the person, than validate it and insert into the database",
                "tags": [
                    "Person"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            },
                            "examples": {
                                "person": {
                                    "value": {
                                        "name": "joaozinho ciclano",
                                        "sex": "MASCULINO",
                                        "birthday": "03/03/2021",
                                        "city_id": "joazinho@email.com"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "400": {
                        "description": "It shows up when req.body have invalid items to insert like a wrong city_id"
                    },
                    "201": {
                        "description": "It shows up when person is created with success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Person"
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get all people from the database that match with the queries using pagination",
                "description": "Pagination style = http://localhost:3000/pessoa/?page=1&limit=10",
                "tags": [
                    "People"
                ],
                "responses": {
                    "200": {
                        "description": "It shows up in every request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/People"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Throws it if the request have bad format on the queries"
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of person to show per page",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The page to show with (limit) amount of people.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The person name to find"
                    }
                ]
            }
        },
        "/cidade": {
            "post": {
                "summary": "Insert a city into the database",
                "description": "This route uses req.body to get information about the city and put it in the database",
                "tags": [
                    "City"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/City"
                            },
                            "examples": {
                                "city": {
                                    "value": {
                                        "name": "Pelotas",
                                        "state": "RS"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "It shows up when city is created with success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/City"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "It shows up when req.body have invalid items to insert"
                    }
                }
            },
            "get": {              
                "summary": "Get all city from the database that match with the queries using pagination",
                "description": "Pagination style = http://localhost:3333/api/v1/car/?page=1&limit=10",
                "tags": [
                    "Cities"
                ],
                "responses": {
                    "200": {
                        "description": "It shows up in every request, throwing an array with all cities matching your query",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "$ref": "#/components/schemas/Cities"
                                }
                            }
                        }
                    }
                },
                "parameters": [
                    {
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of cities to show per page.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The page to show with (limit) amount of cities.",
                        "required": false
                    },
                    {
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The city name to search for"
                    },
                    {
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "type": "string"
                        },
                        "description": "The state to get cities from"
                    }
                ]
            }
        },
        "/pessoa/{id}": {
            "delete": {
                "summary": "Route to delete a person based on it's id",
                "description": "Try to find a person and delete it",
                "tags": [
                    "Person"
                ],
                "responses": {
                    "404": {
                        "description": "Throw a NotFound, telling that there's no person with this id in the database"
                    },
                    "204": {
                        "description": "Person excluded with success"
                    },
                    "400": {
                        "description": "Invalid id format"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            },
            "put": {
                "summary": "Update person values",
                "description": "Using a person ID, search for it and if it founds, put new values on it's name",
                "tags": [
                    "Person"
                ],
                "responses": {
                    "200": {
                        "description": "Person updated with success"
                    },
                    "400": {
                        "description": "Wrong id or content format"
                    },
                    "404": {
                        "description": "Person not found"
                    }
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Person"
                            },
                            "examples": {
                                "person": {
                                    "value": {
                                        "name": "chefia"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "get": {
                "summary": "Get someone by id",
                "description": "Return a person based on its id",
                "tags": [
                    "Person"
                ],
                "responses": {
                    "200": {
                        "description": "Return a person with passed ID"
                    },
                    "400": {
                        "description": "Invalid id format"
                    },
                    "404": {
                        "description":"Person not found"
                    }
                
                },
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": "true",
                        "schema": {
                            "type": "string"
                        }
                    }
                ]
            }
        }
        
    }
    
}